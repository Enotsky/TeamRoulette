} else {
n <- 1
}
inc <- 23
for (i in 1:n){
if (nrow(data.vars) > 60) {
m <- paste("Member", i, collapse = "")
} else {
m <- ''
}
data.vars$newvars[29+inc*(i-1)]<- paste(m, 'Surname', sep = '')
data.vars$newvars[30+inc*(i-1)]<- paste(m, 'Name', collapse = '')
data.vars$newvars[31+inc*(i-1)]<- paste(m, 'Email', collapse = '')
data.vars$newvars[32+inc*(i-1)]<- paste(m, 'Phone', collapse = '')
data.vars$newvars[33+inc*(i-1)]<- paste(m, 'Homecity', collapse = '')
data.vars$newvars[34+inc*(i-1)]<- paste(m, 'Uni', collapse = '')
data.vars$newvars[35+inc*(i-1)]<- paste(m, 'Uni.Custom', collapse = '')
data.vars$newvars[36+inc*(i-1)]<- paste(m, 'Edu', collapse = '')
data.vars$newvars[37+inc*(i-1)]<- paste(m, 'School', collapse = '')
data.vars$newvars[38+inc*(i-1)]<- paste(m, 'Class', collapse = '')
data.vars$newvars[39+inc*(i-1)]<- paste(m, 'Course', collapse = '')
data.vars$newvars[40+inc*(i-1)]<- paste(m, 'Speciality', collapse = '')
data.vars$newvars[41+inc*(i-1)]<- paste(m, 'Faculty', collapse = '')
data.vars$newvars[42+inc*(i-1)]<- paste(m, 'Cathedra', collapse = '')
data.vars$newvars[43+inc*(i-1)]<- paste(m, 'Group', collapse = '')
data.vars$newvars[44+inc*(i-1)]<- paste(m, 'Form', collapse = '')
data.vars$newvars[45+inc*(i-1)]<- paste(m, 'English', collapse = '')
data.vars$newvars[46+inc*(i-1)]<- paste(m, 'Experience.Total', collapse = '')
data.vars$newvars[47+inc*(i-1)]<- paste(m, 'Experience.Description', collapse = '')
data.vars$newvars[48+inc*(i-1)]<- paste(m, 'Cases.Contests', collapse = '')
data.vars$newvars[49+inc*(i-1)]<- paste(m, 'Cases.Bestresult', collapse = '')
data.vars$newvars[50+inc*(i-1)]<- paste(m, 'CV', collapse = '')
data.vars$newvars[51+inc*(i-1)]<- paste(m, 'Permission.PersonalInfo', collapse = '')
}
data.vars
}
data.vars$newvars[22] <- 'Team.Name'
data.vars$newvars[23] <- 'Team.Section'
data.vars$newvars[24] <- 'Team.Full'
data.vars$newvars[25] <- 'Email1'
data.vars$newvars[26] <- 'Email2'
data.vars$newvars[27] <- 'Email3'
data.vars$newvars[28] <- 'Email4'
## Members variable names
if (nrow(data.vars) > 60){
n <- 4
} else {
n <- 1
}
inc <- 23
for (i in 1:n){
if (nrow(data.vars) > 60) {
m <- paste("Member", i, '.', sep = '')
} else {
m <- ''
}
data.vars$newvars[29+inc*(i-1)]<- paste(m, 'Surname', sep = '')
data.vars$newvars[30+inc*(i-1)]<- paste(m, 'Name', sep = '')
data.vars$newvars[31+inc*(i-1)]<- paste(m, 'Email', sep = '')
data.vars$newvars[32+inc*(i-1)]<- paste(m, 'Phone', sep = '')
data.vars$newvars[33+inc*(i-1)]<- paste(m, 'Homecity', sep = '')
data.vars$newvars[34+inc*(i-1)]<- paste(m, 'Uni', sep = '')
data.vars$newvars[35+inc*(i-1)]<- paste(m, 'Uni.Custom', sep = '')
data.vars$newvars[36+inc*(i-1)]<- paste(m, 'Edu', sep = '')
data.vars$newvars[37+inc*(i-1)]<- paste(m, 'School', sep = '')
data.vars$newvars[38+inc*(i-1)]<- paste(m, 'Class', sep = '')
data.vars$newvars[39+inc*(i-1)]<- paste(m, 'Course', sep = '')
data.vars$newvars[40+inc*(i-1)]<- paste(m, 'Speciality', sep = '')
data.vars$newvars[41+inc*(i-1)]<- paste(m, 'Faculty', sep = '')
data.vars$newvars[42+inc*(i-1)]<- paste(m, 'Cathedra', sep = '')
data.vars$newvars[43+inc*(i-1)]<- paste(m, 'Group', sep = '')
data.vars$newvars[44+inc*(i-1)]<- paste(m, 'Form', sep = '')
data.vars$newvars[45+inc*(i-1)]<- paste(m, 'English', sep = '')
data.vars$newvars[46+inc*(i-1)]<- paste(m, 'Experience.Total', sep = '')
data.vars$newvars[47+inc*(i-1)]<- paste(m, 'Experience.Description', sep = '')
data.vars$newvars[48+inc*(i-1)]<- paste(m, 'Cases.Contests', sep = '')
data.vars$newvars[49+inc*(i-1)]<- paste(m, 'Cases.Bestresult', sep = '')
data.vars$newvars[50+inc*(i-1)]<- paste(m, 'CV', sep = '')
data.vars$newvars[51+inc*(i-1)]<- paste(m, 'Permission.PersonalInfo', sep = '')
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
## Set up R
setwd("~/R/TeamRoulette")
## MODE FUNCTION
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
## DISTANCE FUNCTION
dist <- function(pool){
dm <- data.frame(matrix(NA, nrow(pool), nrow(pool)))
colnames(dm) <- pool$TeamID
rownames(dm) <- pool$TeamID
p <- nrow(pool)
if (p>1){
for (i in 1:(p-1)){
for (j in (i+1):p){
dm[i, j] <- abs(pool$Cases.Contests[i] - pool$Cases.Contests[j]) +
abs(pool$Cases.Bestresult[i] - pool$Cases.Bestresult[j])
if(pool$Team.Full[i] + pool$Team.Full[j] > 4) {dm[i, j] <- NA}
}
}
}
dm
}
## GLUE FUNCTION
glue <- function(pool, dm){
m <- min(dm, na.rm = TRUE)
indi <- which(dm == m, arr.ind = TRUE)[1, 1]
indj <- which(dm == m, arr.ind = TRUE)[1, 2]
pool$Members[indi] <- paste(pool$Members[indi], pool$Members[indj], sep = ', ')
pool$Team.Full[indi] <- pool$Team.Full[indi] + pool$Team.Full[indj]
pool$Team.Full[indj] <- 0
pool$Cases.Contests[indj] <- NA
pool$Cases.Bestresult[indj] <- NA
pool
}
## Import data
data <- read.csv('data.csv', encoding = 'UTF-8', stringsAsFactors = FALSE)
data.vars <- data.frame(oldvars = colnames(data), stringsAsFactors = FALSE)
data.vars$newvars <-data.vars$oldvars
## Correct variables names
source('CommonFields.R')
vars <- CommonFields(data.vars)
colnames(data) <- vars$newvars
## Convert dataset into long form
data.member1 <- data[, c(1:51)]
data.member2 <- data[, c(1:28, 52:74)]
data.member3 <- data[, c(1:28, 75:97)]
data.member4 <- data[, c(1:28, 98:120)]
membervars <- data.frame(oldvars = colnames(data.member1), stringsAsFactors = FALSE)
membervars <- CommonFields(membervars)
colnames(data.member1) <- membervars$newvars
colnames(data.member2) <- membervars$newvars
colnames(data.member3) <- membervars$newvars
colnames(data.member4) <- membervars$newvars
data.long <- rbind(data.member1, data.member2, data.member3, data.member4)
data.tidy <- data.long[data.long$Surname != '', ]
data.ordered <- data.tidy[order(data.tidy$Response.ID),]
write.csv(data.ordered, 'ordered.csv')
## Identifing teams
data.ordered$TeamID <- data.ordered$Response.ID
data.ordered$MemberID <- as.integer(rownames(data.ordered))
key <- cbind(data.ordered$Email1, data.ordered$Email2, data.ordered$Email3, data.ordered$Email4)
for (i in 1:nrow(key)){
key[i,] <- key[i,][order(key[i, ])]
data.ordered$TeamKey[i] <- paste(key[i,], collapse='-')
}
teamkeys <- unique(data.ordered$TeamKey)
for (i in 1:length(teamkeys)){
key <- teamkeys[i]
data.ordered$TeamID[data.ordered$TeamKey == teamkeys[i]] <- i
}
teamlist <- data.frame(table(data.ordered$TeamID))
colnames(teamlist) <- c('ID', 'Members.Registered')
teamlist$ID <- as.integer(teamlist$ID)
for (i in teamlist$ID){
data.ordered$Members.Registered[data.ordered$TeamID == i] <- teamlist$Members.Registered[i]
}
## Identifing Team Roulette needs
data.ordered$TR.Needed <- FALSE
data.ordered$TR.Needed <- data.ordered$Team.Full != 'все 4 участника'
data.tr <- data.ordered[data.ordered$TR.Needed, ]
data.ft <- data.ordered[data.ordered$TR.Needed == FALSE, ]
## Getting work database ready
wdb <- data.frame(TeamID = data.tr$TeamID, stringsAsFactors = FALSE)
wdb$Team.Section <- factor(data.tr$Team.Section,
levels = c('Школьная', 'Младшая (1-3 курс)', 'Старшая (4 курс и выше)'))
wdb$Team.Full <- factor(data.tr$Team.Full, levels = c('я один', '2 участника', '3 участника'))
wdb$MemberID <- data.tr$MemberID
wdb$Homecity <- as.character(data.tr$Homecity)
wdb$Institution <- as.character(data.tr$Uni)
wdb$Institution[wdb$Institution == 'ВУЗа нет в списке'] <- as.character(data.tr$Uni.Custom[data.tr$Uni == 'ВУЗа нет в списке'])
wdb$Institution[wdb$Institution == ''] <- as.character(data.tr$School[data.tr$Uni == ''])
wdb$Cases.Contests <- factor(data.tr$Cases.Contests,
levels = c('', 'Не участвовал', '1 раз', '2-3 раза', '4-5 раз', 'Больше 5 раз'))
wdb$Cases.Bestresult <- factor(data.tr$Cases.Bestresult,
levels = c('', 'Участник', 'High Quality 25%', 'High Quality 15%', 'Полуфиналист',
'Финалист', 'Призер (2-3 место)', 'Победитель (1 место)'))
## TeamRoulette
teams <- unique(data.frame(cbind(TeamID = wdb$TeamID,
Team.Full = wdb$Team.Full,
Team.Section = wdb$Team.Section)))
for (i in teams$TeamID){
teams$Homecity[teams$TeamID == i] <- getmode(wdb$Homecity[wdb$TeamID == i])
teams$Institution[teams$TeamID == i] <- getmode(wdb$Institution[wdb$TeamID == i])
teams$Cases.Contests[teams$TeamID == i] <- mean(as.integer(wdb$Cases.Contests[wdb$TeamID == i]))
teams$Cases.Bestresult[teams$TeamID == i] <- mean(as.integer(wdb$Cases.Bestresult[wdb$TeamID == i]))
members <- wdb$MemberID[data.tr$TeamID == i]
teams$Members[teams$TeamID == i] <- paste(members, collapse = ', ')
}
teams <- teams[order(teams$Team.Full, decreasing = TRUE),]
sections <- unique(teams$Team.Section)
cities <- unique(teams$Homecity)
institutions <- unique(teams$Institution)
## Optimal distribution: Educational institution and Homesity match
for (s in sections){
for (c in 1:length(cities)){
for (i in 1:length(institutions)){
pool <- subset(teams, (Team.Section == s)&
(Homecity == cities[c])&
(Institution == institutions[i]))
if (nrow(pool) > 1){
n <- nrow(pool)*2
for (j in 1:n){
dm <- dist(pool)
if (sum(!is.na(dm)) != 0){
pool <- glue(pool, dm)
} else {
j <- n*2
}
}
for (m in pool$TeamID){
teams$MembersNew[teams$TeamID == m] <- pool$Members[pool$TeamID == m]
teams$Team.Full[teams$TeamID == m] <- pool$Team.Full[pool$TeamID == m]
teams$Cases.Contests[teams$TeamID == m] <- pool$Cases.Contests[pool$TeamID == m]
teams$Cases.Bestresult[teams$TeamID == m] <- pool$Cases.Bestresult[pool$TeamID == m]
teams$MembersNew[teams$TeamID == m] <- pool$Members[pool$TeamID == m]
}
}
}
}
}
teams <- teams[teams$Team.Full > 0,]
teams$MembersNew[is.na(teams$MembersNew)] <- teams$Members[is.na(teams$MembersNew)]
teams$MembersOriginal <- teams$Members
teams$Members <- teams$MembersNew
## Less quality: Homecity match
for (s in sections){
for (c in 1:length(cities)){
pool <- subset(teams, (Team.Section == s)&
(Homecity == cities[c]))
if (nrow(pool) > 1){
n <- nrow(pool)*2
for (j in 1:n){
dm <- dist(pool)
if (sum(!is.na(dm)) != 0){
pool <- glue(pool, dm)
} else {
j <- n*2
}
}
for (m in pool$TeamID){
teams$Team.Full[teams$TeamID == m] <- pool$Team.Full[pool$TeamID == m]
teams$Cases.Contests[teams$TeamID == m] <- pool$Cases.Contests[pool$TeamID == m]
teams$Cases.Bestresult[teams$TeamID == m] <- pool$Cases.Bestresult[pool$TeamID == m]
teams$MembersNew[teams$TeamID == m] <- pool$Members[pool$TeamID == m]
}
}
}
}
teams <- teams[teams$Team.Full > 0,]
teams$MembersNew[is.na(teams$MembersNew)] <- teams$Members[is.na(teams$MembersNew)]
teams$Members <- teams$MembersNew
## Rewriting members' teams
memberslist <- strsplit(teams$Members, split =", ")
newID <- data.frame(TeamID = rep(teams$TeamID, sapply(memberslist, length)),
Team.Full = rep(teams$Team.Full, sapply(memberslist, length)),
MemberID = as.integer(unlist(memberslist)))
for (i in newID$MemberID){
data.tr$TeamID.New[data.tr$MemberID == i] <- newID$TeamID[newID$MemberID == i]
}
data.ft$TeamID.New <- data.ft$TeamID
data.ready <- rbind(data.ft, data.tr)
write.csv(data.ready, 'rouletted.csv')
setwd("~/R/TeamRoulette")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
dist <- function(pool){
dm <- data.frame(matrix(NA, nrow(pool), nrow(pool)))
colnames(dm) <- pool$TeamID
rownames(dm) <- pool$TeamID
p <- nrow(pool)
if (p>1){
for (i in 1:(p-1)){
for (j in (i+1):p){
dm[i, j] <- abs(pool$Cases.Contests[i] - pool$Cases.Contests[j]) +
abs(pool$Cases.Bestresult[i] - pool$Cases.Bestresult[j])
if(pool$Team.Full[i] + pool$Team.Full[j] > 4) {dm[i, j] <- NA}
}
}
}
dm
}
glue <- function(pool, dm){
m <- min(dm, na.rm = TRUE)
indi <- which(dm == m, arr.ind = TRUE)[1, 1]
indj <- which(dm == m, arr.ind = TRUE)[1, 2]
pool$Members[indi] <- paste(pool$Members[indi], pool$Members[indj], sep = ', ')
pool$Team.Full[indi] <- pool$Team.Full[indi] + pool$Team.Full[indj]
pool$Team.Full[indj] <- 0
pool$Cases.Contests[indj] <- NA
pool$Cases.Bestresult[indj] <- NA
pool
}
data <- read.csv('data.csv', encoding = 'UTF-8', stringsAsFactors = FALSE)
data.vars <- data.frame(oldvars = colnames(data), stringsAsFactors = FALSE)
data.vars$newvars <-data.vars$oldvars
source('CommonFields.R')
vars <- CommonFields(data.vars)
colnames(data) <- vars$newvars
data.member1 <- data[, c(1:51)]
data.member2 <- data[, c(1:28, 52:74)]
data.member3 <- data[, c(1:28, 75:97)]
data.member4 <- data[, c(1:28, 98:120)]
View(data.member1)
membervars <- data.frame(oldvars = colnames(data.member1), stringsAsFactors = FALSE)
membervars <- CommonFields(membervars)
colnames(data.member1) <- membervars$newvars
colnames(data.member2) <- membervars$newvars
View(membervars)
membervars <- data.frame(oldvars = colnames(data.member1), stringsAsFactors = FALSE)
membervars <- CommonFields(membervars)
membervars <- data.frame(oldvars = colnames(data.member1), stringsAsFactors = FALSE)
View(memebervars)
data.member1 <- data[, c(1:51)]
data.member2 <- data[, c(1:28, 52:74)]
data.member3 <- data[, c(1:28, 75:97)]
data.member4 <- data[, c(1:28, 98:120)]
membervars <- data.frame(oldvars = colnames(data.member1), stringsAsFactors = FALSE)
membervars <- CommonFields(membervars)
data.member1 <- data[, c(1:51)]
data.member2 <- data[, c(1:28, 52:74)]
data.member3 <- data[, c(1:28, 75:97)]
data.member4 <- data[, c(1:28, 98:120)]
membervars <- data.frame(oldvars = colnames(data.member1), stringsAsFactors = FALSE)
membervars <- CommonFields(membervars)
View(vars)
setwd("~/R/TeamRoulette")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
dist <- function(pool){
dm <- data.frame(matrix(NA, nrow(pool), nrow(pool)))
colnames(dm) <- pool$TeamID
rownames(dm) <- pool$TeamID
p <- nrow(pool)
if (p>1){
for (i in 1:(p-1)){
for (j in (i+1):p){
dm[i, j] <- abs(pool$Cases.Contests[i] - pool$Cases.Contests[j]) +
abs(pool$Cases.Bestresult[i] - pool$Cases.Bestresult[j])
if(pool$Team.Full[i] + pool$Team.Full[j] > 4) {dm[i, j] <- NA}
}
}
}
dm
}
glue <- function(pool, dm){
m <- min(dm, na.rm = TRUE)
indi <- which(dm == m, arr.ind = TRUE)[1, 1]
indj <- which(dm == m, arr.ind = TRUE)[1, 2]
pool$Members[indi] <- paste(pool$Members[indi], pool$Members[indj], sep = ', ')
pool$Team.Full[indi] <- pool$Team.Full[indi] + pool$Team.Full[indj]
pool$Team.Full[indj] <- 0
pool$Cases.Contests[indj] <- NA
pool$Cases.Bestresult[indj] <- NA
pool
}
data <- read.csv('data.csv', encoding = 'UTF-8', stringsAsFactors = FALSE)
data.vars <- data.frame(oldvars = colnames(data), stringsAsFactors = FALSE)
data.vars$newvars <-data.vars$oldvars
source('CommonFields.R')
vars <- CommonFields(data.vars)
colnames(data) <- vars$newvars
View(data)
str(data)
tail(colnames(data))
data.member1 <- data[, c(1:51)]
data.member2 <- data[, c(1:28, 52:74)]
data.member3 <- data[, c(1:28, 75:97)]
data.member4 <- data[, c(1:28, 98:120)]
membervars <- data.frame(oldvars = colnames(data.member1), stringsAsFactors = FALSE)
View(membervars)
brow(membervars)
nrow(membervars)
source('~/R/TeamRoulette/CommonFields.R')
membervars <- CommonFields(membervars)
colnames(data.member1) <- membervars$newvars
colnames(data.member2) <- membervars$newvars
colnames(data.member3) <- membervars$newvars
colnames(data.member4) <- membervars$newvars
data.long <- rbind(data.member1, data.member2, data.member3, data.member4)
data.tidy <- data.long[data.long$Surname != '', ]
data.ordered <- data.tidy[order(data.tidy$Response.ID),]
write.csv(data.ordered, 'ordered.csv')
data.ordered$TeamID <- data.ordered$Response.ID
data.ordered$MemberID <- as.integer(rownames(data.ordered))
key <- cbind(data.ordered$Email1, data.ordered$Email2, data.ordered$Email3, data.ordered$Email4)
for (i in 1:nrow(key)){
key[i,] <- key[i,][order(key[i, ])]
data.ordered$TeamKey[i] <- paste(key[i,], collapse='-')
}
teamkeys <- unique(data.ordered$TeamKey)
for (i in 1:length(teamkeys)){
key <- teamkeys[i]
data.ordered$TeamID[data.ordered$TeamKey == teamkeys[i]] <- i
}
teamlist <- data.frame(table(data.ordered$TeamID))
colnames(teamlist) <- c('ID', 'Members.Registered')
teamlist$ID <- as.integer(teamlist$ID)
for (i in teamlist$ID){
data.ordered$Members.Registered[data.ordered$TeamID == i] <- teamlist$Members.Registered[i]
}
data.ordered$TR.Needed <- FALSE
data.ordered$TR.Needed <- data.ordered$Team.Full != 'все 4 участника'
data.tr <- data.ordered[data.ordered$TR.Needed, ]
data.ft <- data.ordered[data.ordered$TR.Needed == FALSE, ]
wdb <- data.frame(TeamID = data.tr$TeamID, stringsAsFactors = FALSE)
wdb$Team.Section <- factor(data.tr$Team.Section,
levels = c('Школьная', 'Младшая (1-3 курс)', 'Старшая (4 курс и выше)'))
wdb$Team.Full <- factor(data.tr$Team.Full, levels = c('я один', '2 участника', '3 участника'))
wdb$MemberID <- data.tr$MemberID
wdb$Homecity <- as.character(data.tr$Homecity)
wdb$Institution <- as.character(data.tr$Uni)
wdb$Institution[wdb$Institution == 'ВУЗа нет в списке'] <- as.character(data.tr$Uni.Custom[data.tr$Uni == 'ВУЗа нет в списке'])
wdb$Institution[wdb$Institution == ''] <- as.character(data.tr$School[data.tr$Uni == ''])
wdb$Cases.Contests <- factor(data.tr$Cases.Contests,
levels = c('', 'Не участвовал', '1 раз', '2-3 раза', '4-5 раз', 'Больше 5 раз'))
wdb$Cases.Bestresult <- factor(data.tr$Cases.Bestresult,
levels = c('', 'Участник', 'High Quality 25%', 'High Quality 15%', 'Полуфиналист',
'Финалист', 'Призер (2-3 место)', 'Победитель (1 место)'))
teams <- unique(data.frame(cbind(TeamID = wdb$TeamID,
Team.Full = wdb$Team.Full,
Team.Section = wdb$Team.Section)))
for (i in teams$TeamID){
teams$Homecity[teams$TeamID == i] <- getmode(wdb$Homecity[wdb$TeamID == i])
teams$Institution[teams$TeamID == i] <- getmode(wdb$Institution[wdb$TeamID == i])
teams$Cases.Contests[teams$TeamID == i] <- mean(as.integer(wdb$Cases.Contests[wdb$TeamID == i]))
teams$Cases.Bestresult[teams$TeamID == i] <- mean(as.integer(wdb$Cases.Bestresult[wdb$TeamID == i]))
members <- wdb$MemberID[data.tr$TeamID == i]
teams$Members[teams$TeamID == i] <- paste(members, collapse = ', ')
}
teams <- teams[order(teams$Team.Full, decreasing = TRUE),]
sections <- unique(teams$Team.Section)
cities <- unique(teams$Homecity)
institutions <- unique(teams$Institution)
for (s in sections){
for (c in 1:length(cities)){
for (i in 1:length(institutions)){
pool <- subset(teams, (Team.Section == s)&
(Homecity == cities[c])&
(Institution == institutions[i]))
if (nrow(pool) > 1){
n <- nrow(pool)*2
for (j in 1:n){
dm <- dist(pool)
if (sum(!is.na(dm)) != 0){
pool <- glue(pool, dm)
} else {
j <- n*2
}
}
for (m in pool$TeamID){
teams$MembersNew[teams$TeamID == m] <- pool$Members[pool$TeamID == m]
teams$Team.Full[teams$TeamID == m] <- pool$Team.Full[pool$TeamID == m]
teams$Cases.Contests[teams$TeamID == m] <- pool$Cases.Contests[pool$TeamID == m]
teams$Cases.Bestresult[teams$TeamID == m] <- pool$Cases.Bestresult[pool$TeamID == m]
teams$MembersNew[teams$TeamID == m] <- pool$Members[pool$TeamID == m]
}
}
}
}
}
teams <- teams[teams$Team.Full > 0,]
teams$MembersNew[is.na(teams$MembersNew)] <- teams$Members[is.na(teams$MembersNew)]
teams$MembersOriginal <- teams$Members
teams$Members <- teams$MembersNew
for (s in sections){
for (c in 1:length(cities)){
pool <- subset(teams, (Team.Section == s)&
(Homecity == cities[c]))
if (nrow(pool) > 1){
n <- nrow(pool)*2
for (j in 1:n){
dm <- dist(pool)
if (sum(!is.na(dm)) != 0){
pool <- glue(pool, dm)
} else {
j <- n*2
}
}
for (m in pool$TeamID){
teams$Team.Full[teams$TeamID == m] <- pool$Team.Full[pool$TeamID == m]
teams$Cases.Contests[teams$TeamID == m] <- pool$Cases.Contests[pool$TeamID == m]
teams$Cases.Bestresult[teams$TeamID == m] <- pool$Cases.Bestresult[pool$TeamID == m]
teams$MembersNew[teams$TeamID == m] <- pool$Members[pool$TeamID == m]
}
}
}
}
teams <- teams[teams$Team.Full > 0,]
teams$MembersNew[is.na(teams$MembersNew)] <- teams$Members[is.na(teams$MembersNew)]
teams$Members <- teams$MembersNew
memberslist <- strsplit(teams$Members, split =", ")
newID <- data.frame(TeamID = rep(teams$TeamID, sapply(memberslist, length)),
Team.Full = rep(teams$Team.Full, sapply(memberslist, length)),
MemberID = as.integer(unlist(memberslist)))
for (i in newID$MemberID){
data.tr$TeamID.New[data.tr$MemberID == i] <- newID$TeamID[newID$MemberID == i]
}
data.ft$TeamID.New <- data.ft$TeamID
data.ready <- rbind(data.ft, data.tr)
write.csv(data.ready, 'rouletted.csv')
View(teams)
View(data.ready)
